/*
 * Input a and b, interpret them as uint32 and do unsigned division.
 * Interpret the quotient and remainder as int32 and write them.
 */

int kTwoPowers[32]; // [31] is negative

int init_two_powers()
{
    int init_two_powers_i = 0;
    int init_two_powers_power = 1;

    while (init_two_powers_i < 32)
    {
        kTwoPowers[init_two_powers_i] = init_two_powers_power;
        init_two_powers_power = init_two_powers_power * 2;
        init_two_powers_i = init_two_powers_i + 1;
    }

    return 0;
}

// uint32 operations

int rshift_uint32(int rshift_uint32_x, int rshift_uint32_usr_a)
{
    if (rshift_uint32_usr_a >= 32 ||
        (rshift_uint32_x >= 0 && rshift_uint32_usr_a == 31))
    {
        return 0;
    }

    if (rshift_uint32_x < 0 && rshift_uint32_usr_a > 0)
    {
        // clear msb
        rshift_uint32_x = rshift_uint32_x + (-2147483648);
        // perform normal right shift
        rshift_uint32_x = rshift_uint32_x / 2;
        // reset msb
        rshift_uint32_x = rshift_uint32_x + 1073741824;
        rshift_uint32_usr_a = rshift_uint32_usr_a - 1;
    }

    // Now a<31
    return rshift_uint32_x / kTwoPowers[rshift_uint32_usr_a];
}

int get_bits_uint32(int get_bits_uint32_a)
{
    int get_bits_uint32_bits = 0;
    while (rshift_uint32(get_bits_uint32_a, get_bits_uint32_bits))
    {
        get_bits_uint32_bits = get_bits_uint32_bits + 1;
    }

    return get_bits_uint32_bits;
}

int cmp_uint32(int cmp_uint32_a, int cmp_uint32_b)
{
    if ((cmp_uint32_a < 0 && cmp_uint32_b < 0) ||
        (cmp_uint32_a >= 0 && cmp_uint32_b >= 0))
    {
        if (cmp_uint32_a > cmp_uint32_b)
        {
            return 1;
        }
        else if (cmp_uint32_a < cmp_uint32_b)
        {
            return -1;
        }
        else
        {
            return 0;
        }
    }
    else if (cmp_uint32_a < 0 && cmp_uint32_b >= 0)
    {
        return 1;
    }
    else if (cmp_uint32_b < 0 && cmp_uint32_a >= 0)
    {
        return -1;
    }
}

int neg_uint32(int neg_uint32_a)
{
    return -1 - neg_uint32_a + 1;
}

int add_full_uint32(
    int add_full_uint32_carry_out[1],
    int add_full_uint32_a,
    int add_full_uint32_b)
{
    int add_full_uint32_dist_a = -1 - add_full_uint32_a;
    if (cmp_uint32(add_full_uint32_dist_a, add_full_uint32_b) < 0)
    {
        add_full_uint32_carry_out[0] = 1;
    }
    else
    {
        add_full_uint32_carry_out[0] = 0;
    }

    return add_full_uint32_a + add_full_uint32_b;
}

int sub_full_uint32(
    int sub_full_uint32_borrow_out[1],
    int sub_full_uint32_a,
    int sub_full_uint32_b)
{
    if (cmp_uint32(sub_full_uint32_a, sub_full_uint32_b) < 0)
    {
        sub_full_uint32_borrow_out[0] = 1;
    }
    else
    {
        sub_full_uint32_borrow_out[0] = 0;
    }

    return sub_full_uint32_a - sub_full_uint32_b;
}

int mul_uint32(int mul_uint32_uint64_out[2], int mul_uint32_a, int mul_uint32_b)
{
    // a=ah al=(ah<<16)+al
    // b=bh bl=(bh<<16)+bl
    // a*b=((ah*bh)<<32)+((ah*bl)<<16)+((al*bh)<<16)+(al*bl)
    //
    // |---------------(a*b)----------------|
    // |-----(a*b)_h-----||-----(a*b)_l-----|
    //
    // equals the sum of:
    //
    // |      32bit      |00...............00  ((ah*bh)<<32)
    // --------------------------------------
    //          |      32bit      |00......00  ((ah*bl)<<16)
    //          -----------------------------
    //          |      32bit      |00......00  ((al*bh)<<16)
    //          -----------------------------
    //                    |       32bit     |  (al*bl)
    //                    -------------------
    // Therefore:
    // (a*b)_l=(al*bl)+((ah*bl)<<16)+((al*bh)<<16) with carry=C (note C could be 0,1,2)
    // (a*b)_h=(ah*bh)+((ah*bl)>>16)+((al*bh)>>16)+C

    int mul_uint32_ah = rshift_uint32(mul_uint32_a, 16);
    int mul_uint32_al = mul_uint32_a - mul_uint32_ah * 65536;

    int mul_uint32_bh = rshift_uint32(mul_uint32_b, 16);
    int mul_uint32_bl = mul_uint32_b - mul_uint32_bh * 65536;

    int mul_uint32_abh = mul_uint32_ah * mul_uint32_bh +
                         rshift_uint32(mul_uint32_ah * mul_uint32_bl, 16) +
                         rshift_uint32((mul_uint32_al * mul_uint32_bh), 16);

    int mul_uint32_abl_carry[1];
    int mul_uint32_abl = add_full_uint32(
        mul_uint32_abl_carry,
        mul_uint32_al * mul_uint32_bl,
        ((mul_uint32_ah * mul_uint32_bl) * 65536));

    mul_uint32_abh = mul_uint32_abh + mul_uint32_abl_carry[0];

    mul_uint32_abl = add_full_uint32(
        mul_uint32_abl_carry,
        mul_uint32_abl,
        ((mul_uint32_al * mul_uint32_bh) * 65536));

    mul_uint32_abh = mul_uint32_abh + mul_uint32_abl_carry[0];

    mul_uint32_uint64_out[0] = mul_uint32_abh;
    mul_uint32_uint64_out[1] = mul_uint32_abl;

    return 0;
}

int div_mod_uint32(
    int div_mod_uint32_rem_out[1],
    int div_mod_uint32_a,
    int div_mod_uint32_b)
{
    int div_mod_uint32_i;
    int div_mod_uint32_a_bits, div_mod_uint32_b_bits;
    int div_mod_uint32_rem = div_mod_uint32_a;
    int div_mod_uint32_rem_lshift_count = 0;
    int div_mod_uint32_result = 0;

    if (cmp_uint32(div_mod_uint32_a, div_mod_uint32_b) < 0)
    {
        div_mod_uint32_rem_out[0] = div_mod_uint32_a;
        return 0;
    }

    div_mod_uint32_a_bits = get_bits_uint32(div_mod_uint32_a);
    div_mod_uint32_b_bits = get_bits_uint32(div_mod_uint32_b);

    div_mod_uint32_b = div_mod_uint32_b * kTwoPowers[div_mod_uint32_a_bits - div_mod_uint32_b_bits];

    // iterate (a_bits-b_bits+1) rounds
    div_mod_uint32_i = div_mod_uint32_a_bits - div_mod_uint32_b_bits;
    while (div_mod_uint32_i >= 0)
    {
        div_mod_uint32_result = div_mod_uint32_result * 2;

        if (cmp_uint32(div_mod_uint32_rem, div_mod_uint32_b) >= 0)
        {
            div_mod_uint32_result = div_mod_uint32_result + 1;
            div_mod_uint32_rem = div_mod_uint32_rem - div_mod_uint32_b;
            div_mod_uint32_rem = div_mod_uint32_rem * 2;
            div_mod_uint32_rem_lshift_count = div_mod_uint32_rem_lshift_count + 1;
        }
        else
        {
            div_mod_uint32_b = rshift_uint32(div_mod_uint32_b, 1);
        }

        div_mod_uint32_i = div_mod_uint32_i - 1;
    }

    div_mod_uint32_rem_out[0] = rshift_uint32(div_mod_uint32_rem, div_mod_uint32_rem_lshift_count);

    return div_mod_uint32_result;
}

int main()
{
    int a = read();
    int b = read();

    int quot, rem[1];

    init_two_powers();

    quot = div_mod_uint32(rem, a, b);

    write(quot);
    write(rem[0]);

    return 0;
}